{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1482385219000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1482391034000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1482391034000},{"_id":"themes/maupassant/_config.yml","hash":"3350f11d439f9a0f89f731bd2af73098f7a88d05","modified":1482404675000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1482391034000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1482391034000},{"_id":"source/_posts/使用libev实现timer定时器.md","hash":"18f5183bf0b9ce7d2a41811ef46dfe42f80fe3b6","modified":1482392680000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1482391034000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1482391034000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1482391027000},{"_id":"themes/maupassant/.git/index","hash":"ae5b1ccbb4567ebe53ab535c2747bf3f7d0c5fb2","modified":1482396381000},{"_id":"themes/maupassant/.git/packed-refs","hash":"7e5a3a316bceea99c04f43d0aaf4ad228157392c","modified":1482391033000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1482391034000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1482391034000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1482391034000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1482391034000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1482391034000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1482391034000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1482391034000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1482391034000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"690fee04231b2e6721580516849f7b80cf42be94","modified":1482391034000},{"_id":"themes/maupassant/layout/index.jade","hash":"f842164f6cba007c1dfcd7fe7bba24736bc886a9","modified":1482391034000},{"_id":"themes/maupassant/layout/base.jade","hash":"7bf57fe89b66dfbd3498ba3e19135378dc1abe8c","modified":1482405114000},{"_id":"themes/maupassant/layout/page.jade","hash":"05f27a37d1721562decde01d5ab09ccecd3ef3d1","modified":1482405067000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1482391034000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1482391034000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1482391034000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1482391027000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1482391027000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1482391027000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"d31e6f50c060a0dbcbd44b24b0f9da2b87f2e519","modified":1482391034000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1482391034000},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1482391034000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482391034000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482391034000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482391034000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482391034000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482391034000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1482391034000},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1482391034000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482391034000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1482391034000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1482391034000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1482391034000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1482404536000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1482391034000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1482391034000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1482391034000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1482391034000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1482391034000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1482391034000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1482391034000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1482391034000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"f9f08c59e75c6b74b551bab7c9209e1ffd67d448","modified":1482391034000},{"_id":"themes/maupassant/.git/objects/pack/pack-ebf07df403c11953965f8db42d6bb55c04c856ea.idx","hash":"25fd4b552fa3bc1622a7b3ff88042888c87851f7","modified":1482391033000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"d31e6f50c060a0dbcbd44b24b0f9da2b87f2e519","modified":1482391034000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1482391033000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"d31e6f50c060a0dbcbd44b24b0f9da2b87f2e519","modified":1482391034000},{"_id":"themes/maupassant/.git/objects/pack/pack-ebf07df403c11953965f8db42d6bb55c04c856ea.pack","hash":"5ef5a3306e6e8ecf7bc278b4750ad3d72c998b24","modified":1482391033000},{"_id":"public/archives/index.html","hash":"ae206554b1df3671ac66dfbfa83e1abea2945b14","modified":1482404620583},{"_id":"public/archives/2016/index.html","hash":"ae206554b1df3671ac66dfbfa83e1abea2945b14","modified":1482404620584},{"_id":"public/archives/2016/12/index.html","hash":"ae206554b1df3671ac66dfbfa83e1abea2945b14","modified":1482404620585},{"_id":"public/categories/代码开发/index.html","hash":"97f0ba4abe5706b93a7d8ac854531edbdecba537","modified":1482404620585},{"_id":"public/index.html","hash":"7ff6916081eafe9baba8e40ec03f2985fce564eb","modified":1482404620585},{"_id":"public/tags/c/index.html","hash":"135c2c51505ae9a30d100b17a9f7898f0d39bb55","modified":1482404620585},{"_id":"public/tags/linux/index.html","hash":"5151ec9b64d6787f143bf4b6c6cf35a8e6ada903","modified":1482404620585},{"_id":"public/tags/libev/index.html","hash":"62da7334cb7d644f6a21fb4a8d1740495b421916","modified":1482404620585},{"_id":"public/tags/timer/index.html","hash":"09fbe85575c5b3d03884dddf5087f9c462dbb1f6","modified":1482404620585},{"_id":"public/2016/12/22/使用libev实现timer定时器/index.html","hash":"1a2844374ae5a6b3bdef284dbe91a1c7db18e4c3","modified":1482404620586},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482403912508},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482403912509},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482403912509},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482403912509},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482403912509},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482403912509},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1482403912583},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1482403912583},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1482403912583},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1482403912583},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1482403912583},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1482403912583},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1482403912583},{"_id":"public/css/style.css","hash":"2afb6e7e24abf81c8b7b7d472fb0bb9b9a1eac16","modified":1482403912584},{"_id":"source/guestbook/index.md","hash":"2eaa73cb4b0f1b8c5023f3bcea6854a001fad764","modified":1482405395000},{"_id":"source/about/index.md","hash":"b2fd48deca8e07d887cdf4aab5cb3885d9305a98","modified":1482406750000}],"Category":[{"name":"代码开发","_id":"cix090hyf0001eua67zali0id"}],"Data":[],"Page":[{"title":"留言","date":"2016-12-22T11:15:04.000Z","comments":1,"_content":"欢迎大家与我交流\n","source":"guestbook/index.md","raw":"---\ntitle: 留言\ndate: 2016-12-22 19:15:04\ncomments: true\n---\n欢迎大家与我交流\n","updated":"2016-12-22T11:16:35.000Z","path":"guestbook/index.html","_id":"cix09ufw40000h5a67sry8ysv","layout":"page","content":"<p>欢迎大家与我交流</p>\n","excerpt":"","more":"<p>欢迎大家与我交流</p>\n"},{"title":"关于我","date":"2016-12-22T11:39:10.000Z","_content":"\n* 80后程序猿\n* 喜欢看电影,上网,和好友分享喜悦\n* 平时会关注技术相关信息\n\n\n* 微信：dremi2012\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-12-22 19:39:10\n---\n\n* 80后程序猿\n* 喜欢看电影,上网,和好友分享喜悦\n* 平时会关注技术相关信息\n\n\n* 微信：dremi2012\n\n\n","updated":"2016-12-22T11:56:18.000Z","path":"about/index.html","_id":"cix0apde40000i0a6if17hsj4","comments":1,"layout":"page","content":"<ul>\n<li>80后程序猿</li>\n<li>喜欢看电影,上网,和好友分享喜悦</li>\n<li>平时会关注技术相关信息</li>\n</ul>\n<ul>\n<li>微信：dremi2012</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>80后程序猿</li>\n<li>喜欢看电影,上网,和好友分享喜悦</li>\n<li>平时会关注技术相关信息</li>\n</ul>\n<ul>\n<li>微信：dremi2012</li>\n</ul>\n"}],"Post":[{"title":"使用libev实现timer定时器","date":"2016-12-22T04:36:55.000Z","comments":1,"_content":"\n\nlibev是轻量级、高性能事件循环/事件模型的网络库，和他很相似的开源有libevent，libev开源代码很晦涩，较难读懂，里面可谓是把宏用到极致，代码很简练。libev提供非常全的功能，包含\n\n```\nev_io\nev_timer\nev_periodic\nev_signal\nev_child\nev_stat\nev_idle\nev_prepare and ev_check\nev_embed\nev_fork\nev_cleanup\nev_async\n```\n\n本文主要写一下关于timer如何使用，以及对他进行一个简单封装，这是开发软件常用的方法，原型开发时，能采用开源尽量利用开源资源，但正式开发是否会使用开源或者自己实现一个库是要进行评估的。所以开源相关接口都可以考虑封装，到时候使用其它库时，替换工作量较小。\n\n\n下面是实现代码：主要调用libev中\n```\nev_loop_new\nev_loop\nev_timer_init\nev_timer_stop\nev_timer_start\n```\n\n这些接口，来完成定时器功能的封装。\n\n\n## 头文件\n\n```c\n#ifndef _dims_timer_h_\n#define _dims_timer_h_\n\n#include <pthread.h>\n\n#include \"dims_base.h\"\n#include \"ev.h\"\n\t\t\t\t\t\t\t\n\ntypedef void (*dims_timer_cb)(void *arg);\n\ntypedef struct dims_watcher_tag\n{\n\tstruct\tdims_watcher_tag \t*next;\n\tdims_uint32 \ttype; \n\tdims_timer_cb   timer_cb;\n\tvoid\t\t\t*pvData;\n\tev_timer\t\ttimer_watcher; \n}dims_watcher_t;\n\ntypedef struct dims_timer_tag\n{\n\tdims_uint32 \t\tbInited;\n\tdims_timer_cb\t\tinit_cb;\n\tvoid\t\t\t\t*pvData;\n\tdims_watcher_t\t\t*watcher_list;\n\tpthread_t\t\t\tthread_id;\n\tpthread_mutex_t\t\tlock;\n\tstruct ev_loop \t\t*loop;\n}dims_timer_t;\n\nextern dims_uint32 dims_timer_create(dims_timer_t *timer, dims_timer_cb init_cb, void *pvInitData);\nextern void dims_timer_init(dims_timer_t *timer, \n\t\tdims_timer_cb\t  timer_cb,\n\t\tdims_uint32       type,\n\t\tvoid              *pvData,\n\t\tdouble            after,\n\t\tdouble            repeat);\nextern void dims_timer_start(dims_timer_t *timer, dims_uint32 type);\nextern void dims_timer_stop(dims_timer_t *timer, dims_uint32 type);\n\n#endif /* _dims_timer_h_ */\n\n```\n\n##源文件\n\n```c\n/*\n * 对libev timer操作进行封装\n */\n\n#include <ev.h>\n#include <stdlib.h>\n#include \"dims_timer.h\"\n\nstatic void timer_watcher_cb(EV_P_ ev_timer *w, int revents)\n{\n\tdims_watcher_t *watcher = (dims_watcher_t*)w->data;\n\tif(!watcher) return;\n\n\tif(watcher->timer_cb)\n\t\twatcher->timer_cb(watcher);\n}\n\nstatic void * timer_loop_entry(void *arg)\n{\n\tdims_timer_t *timer = (dims_timer_t*)arg;\n\tstatic ev_timer w;\n\t\t\t\n\tif(!timer) return 0;\n\tif(timer->bInited) return 0;\n\ttimer->loop = ev_loop_new(0);\n\t\n\ttimer->bInited = 1;\n\tif(timer->init_cb) timer->init_cb(arg);\n\n\tev_timer_init(&w, timer_watcher_cb,1 , 0);\n\tev_timer_start(timer->loop, &w);\n\n\tev_loop(timer->loop, 0);\n\treturn 0;\n}\n\n\ndims_uint32 dims_timer_create(dims_timer_t *timer, dims_timer_cb init_cb, void *pvData)\n{\n\tif(!timer) return DIMS_ERROR;\n\n\ttimer->bInited = 0;\n\ttimer->init_cb = init_cb;\n\ttimer->pvData = pvData;\n\ttimer->watcher_list = DIMS_NULL;\n\tpthread_mutex_init(&timer->lock, 0);\n\tif(0 != pthread_create(&(timer->thread_id), NULL, timer_loop_entry, (void*)timer))\n\t{\n\t\treturn DIMS_ERROR;\n\t}\n\n\twhile(!timer->bInited) sleep(0);\t\n\n\treturn DIMS_OK;\n}\n\nstatic void dims_watcher_del(dims_timer_t *timer, dims_uint32 type)\n{\n\tdims_watcher_t *w = timer->watcher_list;\n\tdims_watcher_t *prev_w = 0;\n\twhile(w)\n\t{\n\t\tif(w->type == type) break;\n\t\tprev_w = w;\n\t\tw = w->next;\n\t}\n\n\tif(w)\n\t{\n\t\tif(prev_w) prev_w->next = w->next;\n\t\telse timer->watcher_list = 0;\n\t\tfree(w);\n\t}\n}\n\nstatic dims_watcher_t * dims_watcher_find(dims_timer_t *timer, dims_uint32 type)\n{\n\tdims_watcher_t *w = timer->watcher_list;\n\twhile(w)\n\t{\n\t\tif(w->type == type) break;\n\t\tw = w->next;\n\t}\n\treturn w;\n}\n\nstatic void dims_watcher_ins(dims_timer_t *timer, dims_watcher_t *w)\n{\n\tw->next = timer->watcher_list;\n\ttimer->watcher_list = w;\n\t\n}\n\nvoid dims_timer_init(\n\tdims_timer_t \t*timer,\n\tdims_timer_cb \ttimer_cb, \n\tdims_uint32\t\ttype,\n\tvoid\t\t\t*pvData,\n\tdouble \t\t\tafter,\n\tdouble \t\t\trepeat\n\t)\n{\n\tdims_watcher_t *watcher;\n\n\tif(!timer) return ;\n\n\tpthread_mutex_lock(&timer->lock);\n\twatcher = dims_watcher_find(timer, type);\n\tif(watcher)\n\t{\n\t\tev_timer_stop(timer->loop, &watcher->timer_watcher);\n\t}\n\telse\n\t{\n\t\twatcher = (dims_watcher_t*)malloc(sizeof(dims_watcher_t));\n\t\tdims_watcher_ins(timer, watcher);\n\t}\n\t\n\twatcher->timer_cb = timer_cb;\n\twatcher->type = type;\n\twatcher->timer_watcher.data = (void*)watcher;\n\twatcher->pvData = pvData;\n\tev_timer_init(&watcher->timer_watcher, timer_watcher_cb, after, repeat);\n\t\n\tpthread_mutex_unlock(&timer->lock); \n\treturn;\n}\n\nvoid dims_timer_start(dims_timer_t *timer, dims_uint32 type)\n{\n\tdims_watcher_t *w;\n\tif(!timer) return ;\n\n\tpthread_mutex_lock(&timer->lock);\n\tw = dims_watcher_find(timer, type);\n\tif(w)\n\t{\n\t\tev_timer_start(timer->loop, &w->timer_watcher);\n\t}\n\tpthread_mutex_unlock(&timer->lock);\n\treturn;\n}\n\nvoid dims_timer_stop(dims_timer_t *timer, dims_uint32\ttype)\n{\n\tif(!timer) return;\n\tdims_watcher_t *watcher;\n\t\n\tpthread_mutex_lock(&timer->lock);\n\twatcher = dims_watcher_find(timer, type);\n\tif(watcher) \n\t{\n\t\tev_timer_stop(timer->loop, &watcher->timer_watcher);\n\t\tdims_watcher_del(timer, type);\n\t}\n\n\tpthread_mutex_unlock(&timer->lock);\n\treturn;\n}\n\n```\n\n\n\n代码中type字段主要是用来区分定时器类型的，例如一个程序里面需要使用多个定时器，那么用户这里可以type来唯一区分，相同的type认为是同一个定时器。用户在callback调用的时候，也可以根据type来进行不同的处理。\n定时器可以重新设置，启动，停止。\n> dims_timer_init()\n\n函数为初始化一个定时器\n\n\n##测试代码：\n\n```c\n#include <stdio.h>\n#include \"dims_timer.h\"\n#include <unistd.h>\n\n\ndims_timer_t my_timer;\nint cb1, cb2;\n\nvoid my_init_cb(void *arg)\n{\n\tdims_timer_t *tmr = (dims_timer_t*)arg;\n\tprintf(\"timer init %s\\n\", (char*)tmr->pvData);\n}\n\nvoid my_cb(void *arg)\n{\n\tdims_watcher_t *w = arg;\n\tprintf(\"%s cb1 = %d\\n\", (char*)w->pvData, cb1);\n\tcb1++;\n}\n\nvoid my_cb_1(void *arg)\n{\n\tdims_watcher_t *w = arg;\n\tprintf(\"%s cb2 =%d, type =%d\\n\", (char*)w->pvData, cb2, w->type);\n\tcb2++;\n\n\tif(cb2 > 20) dims_timer_stop(&my_timer, 1);\n}\n\nint main(int argc, char**argv)\n{\n\tdims_timer_create(&my_timer, my_init_cb, \"OK!!!\");\n\t\n\tdims_timer_init(&my_timer, my_cb, 0, \"call-1 \", 1, 0.1); //1s秒定时超时，后面每隔0.1s定时超时。\t\t\n\tdims_timer_init(&my_timer, my_cb_1, 1, \"call-2 \", 1.0, 0.5);\t\t\n\n\tdims_timer_start(&my_timer, 0);\n\tdims_timer_start(&my_timer, 1);\n\n\tsleep(2);\n\n\tdims_timer_stop(&my_timer, 0);\n\n\tsleep(8);\n\tdims_timer_stop(&my_timer, 1);\n\n\tsleep(20);\t\n\treturn 0;\n}\n\n```\n\n##参考文档\n\nlibev文档介绍：http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_timer_code_relative_and_opti\n\nlibev官方网站：http://software.schmorp.de/pkg/libev.html\n","source":"_posts/使用libev实现timer定时器.md","raw":"\n---\ntitle: 使用libev实现timer定时器\ndate: 2016-12-22 12:36:55\ntags: [c,linux,libev,timer]\ncategories: [代码开发]\ncomments: true\n---\n\n\nlibev是轻量级、高性能事件循环/事件模型的网络库，和他很相似的开源有libevent，libev开源代码很晦涩，较难读懂，里面可谓是把宏用到极致，代码很简练。libev提供非常全的功能，包含\n\n```\nev_io\nev_timer\nev_periodic\nev_signal\nev_child\nev_stat\nev_idle\nev_prepare and ev_check\nev_embed\nev_fork\nev_cleanup\nev_async\n```\n\n本文主要写一下关于timer如何使用，以及对他进行一个简单封装，这是开发软件常用的方法，原型开发时，能采用开源尽量利用开源资源，但正式开发是否会使用开源或者自己实现一个库是要进行评估的。所以开源相关接口都可以考虑封装，到时候使用其它库时，替换工作量较小。\n\n\n下面是实现代码：主要调用libev中\n```\nev_loop_new\nev_loop\nev_timer_init\nev_timer_stop\nev_timer_start\n```\n\n这些接口，来完成定时器功能的封装。\n\n\n## 头文件\n\n```c\n#ifndef _dims_timer_h_\n#define _dims_timer_h_\n\n#include <pthread.h>\n\n#include \"dims_base.h\"\n#include \"ev.h\"\n\t\t\t\t\t\t\t\n\ntypedef void (*dims_timer_cb)(void *arg);\n\ntypedef struct dims_watcher_tag\n{\n\tstruct\tdims_watcher_tag \t*next;\n\tdims_uint32 \ttype; \n\tdims_timer_cb   timer_cb;\n\tvoid\t\t\t*pvData;\n\tev_timer\t\ttimer_watcher; \n}dims_watcher_t;\n\ntypedef struct dims_timer_tag\n{\n\tdims_uint32 \t\tbInited;\n\tdims_timer_cb\t\tinit_cb;\n\tvoid\t\t\t\t*pvData;\n\tdims_watcher_t\t\t*watcher_list;\n\tpthread_t\t\t\tthread_id;\n\tpthread_mutex_t\t\tlock;\n\tstruct ev_loop \t\t*loop;\n}dims_timer_t;\n\nextern dims_uint32 dims_timer_create(dims_timer_t *timer, dims_timer_cb init_cb, void *pvInitData);\nextern void dims_timer_init(dims_timer_t *timer, \n\t\tdims_timer_cb\t  timer_cb,\n\t\tdims_uint32       type,\n\t\tvoid              *pvData,\n\t\tdouble            after,\n\t\tdouble            repeat);\nextern void dims_timer_start(dims_timer_t *timer, dims_uint32 type);\nextern void dims_timer_stop(dims_timer_t *timer, dims_uint32 type);\n\n#endif /* _dims_timer_h_ */\n\n```\n\n##源文件\n\n```c\n/*\n * 对libev timer操作进行封装\n */\n\n#include <ev.h>\n#include <stdlib.h>\n#include \"dims_timer.h\"\n\nstatic void timer_watcher_cb(EV_P_ ev_timer *w, int revents)\n{\n\tdims_watcher_t *watcher = (dims_watcher_t*)w->data;\n\tif(!watcher) return;\n\n\tif(watcher->timer_cb)\n\t\twatcher->timer_cb(watcher);\n}\n\nstatic void * timer_loop_entry(void *arg)\n{\n\tdims_timer_t *timer = (dims_timer_t*)arg;\n\tstatic ev_timer w;\n\t\t\t\n\tif(!timer) return 0;\n\tif(timer->bInited) return 0;\n\ttimer->loop = ev_loop_new(0);\n\t\n\ttimer->bInited = 1;\n\tif(timer->init_cb) timer->init_cb(arg);\n\n\tev_timer_init(&w, timer_watcher_cb,1 , 0);\n\tev_timer_start(timer->loop, &w);\n\n\tev_loop(timer->loop, 0);\n\treturn 0;\n}\n\n\ndims_uint32 dims_timer_create(dims_timer_t *timer, dims_timer_cb init_cb, void *pvData)\n{\n\tif(!timer) return DIMS_ERROR;\n\n\ttimer->bInited = 0;\n\ttimer->init_cb = init_cb;\n\ttimer->pvData = pvData;\n\ttimer->watcher_list = DIMS_NULL;\n\tpthread_mutex_init(&timer->lock, 0);\n\tif(0 != pthread_create(&(timer->thread_id), NULL, timer_loop_entry, (void*)timer))\n\t{\n\t\treturn DIMS_ERROR;\n\t}\n\n\twhile(!timer->bInited) sleep(0);\t\n\n\treturn DIMS_OK;\n}\n\nstatic void dims_watcher_del(dims_timer_t *timer, dims_uint32 type)\n{\n\tdims_watcher_t *w = timer->watcher_list;\n\tdims_watcher_t *prev_w = 0;\n\twhile(w)\n\t{\n\t\tif(w->type == type) break;\n\t\tprev_w = w;\n\t\tw = w->next;\n\t}\n\n\tif(w)\n\t{\n\t\tif(prev_w) prev_w->next = w->next;\n\t\telse timer->watcher_list = 0;\n\t\tfree(w);\n\t}\n}\n\nstatic dims_watcher_t * dims_watcher_find(dims_timer_t *timer, dims_uint32 type)\n{\n\tdims_watcher_t *w = timer->watcher_list;\n\twhile(w)\n\t{\n\t\tif(w->type == type) break;\n\t\tw = w->next;\n\t}\n\treturn w;\n}\n\nstatic void dims_watcher_ins(dims_timer_t *timer, dims_watcher_t *w)\n{\n\tw->next = timer->watcher_list;\n\ttimer->watcher_list = w;\n\t\n}\n\nvoid dims_timer_init(\n\tdims_timer_t \t*timer,\n\tdims_timer_cb \ttimer_cb, \n\tdims_uint32\t\ttype,\n\tvoid\t\t\t*pvData,\n\tdouble \t\t\tafter,\n\tdouble \t\t\trepeat\n\t)\n{\n\tdims_watcher_t *watcher;\n\n\tif(!timer) return ;\n\n\tpthread_mutex_lock(&timer->lock);\n\twatcher = dims_watcher_find(timer, type);\n\tif(watcher)\n\t{\n\t\tev_timer_stop(timer->loop, &watcher->timer_watcher);\n\t}\n\telse\n\t{\n\t\twatcher = (dims_watcher_t*)malloc(sizeof(dims_watcher_t));\n\t\tdims_watcher_ins(timer, watcher);\n\t}\n\t\n\twatcher->timer_cb = timer_cb;\n\twatcher->type = type;\n\twatcher->timer_watcher.data = (void*)watcher;\n\twatcher->pvData = pvData;\n\tev_timer_init(&watcher->timer_watcher, timer_watcher_cb, after, repeat);\n\t\n\tpthread_mutex_unlock(&timer->lock); \n\treturn;\n}\n\nvoid dims_timer_start(dims_timer_t *timer, dims_uint32 type)\n{\n\tdims_watcher_t *w;\n\tif(!timer) return ;\n\n\tpthread_mutex_lock(&timer->lock);\n\tw = dims_watcher_find(timer, type);\n\tif(w)\n\t{\n\t\tev_timer_start(timer->loop, &w->timer_watcher);\n\t}\n\tpthread_mutex_unlock(&timer->lock);\n\treturn;\n}\n\nvoid dims_timer_stop(dims_timer_t *timer, dims_uint32\ttype)\n{\n\tif(!timer) return;\n\tdims_watcher_t *watcher;\n\t\n\tpthread_mutex_lock(&timer->lock);\n\twatcher = dims_watcher_find(timer, type);\n\tif(watcher) \n\t{\n\t\tev_timer_stop(timer->loop, &watcher->timer_watcher);\n\t\tdims_watcher_del(timer, type);\n\t}\n\n\tpthread_mutex_unlock(&timer->lock);\n\treturn;\n}\n\n```\n\n\n\n代码中type字段主要是用来区分定时器类型的，例如一个程序里面需要使用多个定时器，那么用户这里可以type来唯一区分，相同的type认为是同一个定时器。用户在callback调用的时候，也可以根据type来进行不同的处理。\n定时器可以重新设置，启动，停止。\n> dims_timer_init()\n\n函数为初始化一个定时器\n\n\n##测试代码：\n\n```c\n#include <stdio.h>\n#include \"dims_timer.h\"\n#include <unistd.h>\n\n\ndims_timer_t my_timer;\nint cb1, cb2;\n\nvoid my_init_cb(void *arg)\n{\n\tdims_timer_t *tmr = (dims_timer_t*)arg;\n\tprintf(\"timer init %s\\n\", (char*)tmr->pvData);\n}\n\nvoid my_cb(void *arg)\n{\n\tdims_watcher_t *w = arg;\n\tprintf(\"%s cb1 = %d\\n\", (char*)w->pvData, cb1);\n\tcb1++;\n}\n\nvoid my_cb_1(void *arg)\n{\n\tdims_watcher_t *w = arg;\n\tprintf(\"%s cb2 =%d, type =%d\\n\", (char*)w->pvData, cb2, w->type);\n\tcb2++;\n\n\tif(cb2 > 20) dims_timer_stop(&my_timer, 1);\n}\n\nint main(int argc, char**argv)\n{\n\tdims_timer_create(&my_timer, my_init_cb, \"OK!!!\");\n\t\n\tdims_timer_init(&my_timer, my_cb, 0, \"call-1 \", 1, 0.1); //1s秒定时超时，后面每隔0.1s定时超时。\t\t\n\tdims_timer_init(&my_timer, my_cb_1, 1, \"call-2 \", 1.0, 0.5);\t\t\n\n\tdims_timer_start(&my_timer, 0);\n\tdims_timer_start(&my_timer, 1);\n\n\tsleep(2);\n\n\tdims_timer_stop(&my_timer, 0);\n\n\tsleep(8);\n\tdims_timer_stop(&my_timer, 1);\n\n\tsleep(20);\t\n\treturn 0;\n}\n\n```\n\n##参考文档\n\nlibev文档介绍：http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_timer_code_relative_and_opti\n\nlibev官方网站：http://software.schmorp.de/pkg/libev.html\n","slug":"使用libev实现timer定时器","published":1,"updated":"2016-12-22T11:27:07.000Z","_id":"cix090hy50000eua6prr9078x","layout":"post","photos":[],"link":"","content":"<p>libev是轻量级、高性能事件循环/事件模型的网络库，和他很相似的开源有libevent，libev开源代码很晦涩，较难读懂，里面可谓是把宏用到极致，代码很简练。libev提供非常全的功能，包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">ev_io</div><div class=\"line\">ev_timer</div><div class=\"line\">ev_periodic</div><div class=\"line\">ev_signal</div><div class=\"line\">ev_child</div><div class=\"line\">ev_stat</div><div class=\"line\">ev_idle</div><div class=\"line\">ev_prepare and ev_check</div><div class=\"line\">ev_embed</div><div class=\"line\">ev_fork</div><div class=\"line\">ev_cleanup</div><div class=\"line\">ev_async</div></pre></td></tr></table></figure>\n<p>本文主要写一下关于timer如何使用，以及对他进行一个简单封装，这是开发软件常用的方法，原型开发时，能采用开源尽量利用开源资源，但正式开发是否会使用开源或者自己实现一个库是要进行评估的。所以开源相关接口都可以考虑封装，到时候使用其它库时，替换工作量较小。</p>\n<p>下面是实现代码：主要调用libev中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ev_loop_new</div><div class=\"line\">ev_loop</div><div class=\"line\">ev_timer_init</div><div class=\"line\">ev_timer_stop</div><div class=\"line\">ev_timer_start</div></pre></td></tr></table></figure></p>\n<p>这些接口，来完成定时器功能的封装。</p>\n<h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _dims_timer_h_</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _dims_timer_h_</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"dims_base.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ev.h\"</span></span></div><div class=\"line\">\t\t\t\t\t\t\t</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*dims_timer_cb)</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dims_watcher_tag</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">struct</span>\tdims_watcher_tag \t*next;</div><div class=\"line\">\tdims_uint32 \ttype; </div><div class=\"line\">\tdims_timer_cb   timer_cb;</div><div class=\"line\">\t<span class=\"keyword\">void</span>\t\t\t*pvData;</div><div class=\"line\">\tev_timer\t\ttimer_watcher; </div><div class=\"line\">&#125;<span class=\"keyword\">dims_watcher_t</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dims_timer_tag</div><div class=\"line\">&#123;</div><div class=\"line\">\tdims_uint32 \t\tbInited;</div><div class=\"line\">\tdims_timer_cb\t\tinit_cb;</div><div class=\"line\">\t<span class=\"keyword\">void</span>\t\t\t\t*pvData;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span>\t\t*watcher_list;</div><div class=\"line\">\t<span class=\"keyword\">pthread_t</span>\t\t\tthread_id;</div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span>\t\tlock;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> ev_loop \t\t*loop;</div><div class=\"line\">&#125;<span class=\"keyword\">dims_timer_t</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> dims_uint32 <span class=\"title\">dims_timer_create</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_timer_cb init_cb, <span class=\"keyword\">void</span> *pvInitData)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_timer_init</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, </span></span></div><div class=\"line\">\t\tdims_timer_cb\t  timer_cb,</div><div class=\"line\">\t\tdims_uint32       type,</div><div class=\"line\">\t\t<span class=\"keyword\">void</span>              *pvData,</div><div class=\"line\">\t\t<span class=\"keyword\">double</span>            after,</div><div class=\"line\">\t\t<span class=\"keyword\">double</span>            repeat);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_timer_start</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_timer_stop</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* _dims_timer_h_ */</span></span></div></pre></td></tr></table></figure>\n<p>##源文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 对libev timer操作进行封装</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ev.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"dims_timer.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">timer_watcher_cb</span><span class=\"params\">(EV_P_ ev_timer *w, <span class=\"keyword\">int</span> revents)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *watcher = (<span class=\"keyword\">dims_watcher_t</span>*)w-&gt;data;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!watcher) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(watcher-&gt;timer_cb)</div><div class=\"line\">\t\twatcher-&gt;timer_cb(watcher);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> * <span class=\"title\">timer_loop_entry</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_timer_t</span> *timer = (<span class=\"keyword\">dims_timer_t</span>*)arg;</div><div class=\"line\">\t<span class=\"keyword\">static</span> ev_timer w;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(timer-&gt;bInited) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\ttimer-&gt;loop = ev_loop_new(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\ttimer-&gt;bInited = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(timer-&gt;init_cb) timer-&gt;init_cb(arg);</div><div class=\"line\"></div><div class=\"line\">\tev_timer_init(&amp;w, timer_watcher_cb,<span class=\"number\">1</span> , <span class=\"number\">0</span>);</div><div class=\"line\">\tev_timer_start(timer-&gt;loop, &amp;w);</div><div class=\"line\"></div><div class=\"line\">\tev_loop(timer-&gt;loop, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">dims_uint32 <span class=\"title\">dims_timer_create</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_timer_cb init_cb, <span class=\"keyword\">void</span> *pvData)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> DIMS_ERROR;</div><div class=\"line\"></div><div class=\"line\">\ttimer-&gt;bInited = <span class=\"number\">0</span>;</div><div class=\"line\">\ttimer-&gt;init_cb = init_cb;</div><div class=\"line\">\ttimer-&gt;pvData = pvData;</div><div class=\"line\">\ttimer-&gt;watcher_list = DIMS_NULL;</div><div class=\"line\">\tpthread_mutex_init(&amp;timer-&gt;lock, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"number\">0</span> != pthread_create(&amp;(timer-&gt;thread_id), <span class=\"literal\">NULL</span>, timer_loop_entry, (<span class=\"keyword\">void</span>*)timer))</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DIMS_ERROR;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(!timer-&gt;bInited) sleep(<span class=\"number\">0</span>);\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> DIMS_OK;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_watcher_del</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = timer-&gt;watcher_list;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *prev_w = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(w-&gt;type == type) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\tprev_w = w;</div><div class=\"line\">\t\tw = w-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(prev_w) prev_w-&gt;next = w-&gt;next;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> timer-&gt;watcher_list = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">free</span>(w);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> dims_watcher_t * <span class=\"title\">dims_watcher_find</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = timer-&gt;watcher_list;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(w-&gt;type == type) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\tw = w-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> w;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_watcher_ins</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, <span class=\"keyword\">dims_watcher_t</span> *w)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tw-&gt;next = timer-&gt;watcher_list;</div><div class=\"line\">\ttimer-&gt;watcher_list = w;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dims_timer_init</span><span class=\"params\">(</span></span></div><div class=\"line\">\t<span class=\"keyword\">dims_timer_t</span> \t*timer,</div><div class=\"line\">\tdims_timer_cb \ttimer_cb, </div><div class=\"line\">\tdims_uint32\t\ttype,</div><div class=\"line\">\t<span class=\"keyword\">void</span>\t\t\t*pvData,</div><div class=\"line\">\t<span class=\"keyword\">double</span> \t\t\tafter,</div><div class=\"line\">\t<span class=\"keyword\">double</span> \t\t\trepeat</div><div class=\"line\">\t)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *watcher;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> ;</div><div class=\"line\"></div><div class=\"line\">\tpthread_mutex_lock(&amp;timer-&gt;lock);</div><div class=\"line\">\twatcher = dims_watcher_find(timer, type);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(watcher)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tev_timer_stop(timer-&gt;loop, &amp;watcher-&gt;timer_watcher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\twatcher = (<span class=\"keyword\">dims_watcher_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">dims_watcher_t</span>));</div><div class=\"line\">\t\tdims_watcher_ins(timer, watcher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\twatcher-&gt;timer_cb = timer_cb;</div><div class=\"line\">\twatcher-&gt;type = type;</div><div class=\"line\">\twatcher-&gt;timer_watcher.data = (<span class=\"keyword\">void</span>*)watcher;</div><div class=\"line\">\twatcher-&gt;pvData = pvData;</div><div class=\"line\">\tev_timer_init(&amp;watcher-&gt;timer_watcher, timer_watcher_cb, after, repeat);</div><div class=\"line\">\t</div><div class=\"line\">\tpthread_mutex_unlock(&amp;timer-&gt;lock); </div><div class=\"line\">\t<span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dims_timer_start</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> ;</div><div class=\"line\"></div><div class=\"line\">\tpthread_mutex_lock(&amp;timer-&gt;lock);</div><div class=\"line\">\tw = dims_watcher_find(timer, type);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tev_timer_start(timer-&gt;loop, &amp;w-&gt;timer_watcher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpthread_mutex_unlock(&amp;timer-&gt;lock);</div><div class=\"line\">\t<span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dims_timer_stop</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32\ttype)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *watcher;</div><div class=\"line\">\t</div><div class=\"line\">\tpthread_mutex_lock(&amp;timer-&gt;lock);</div><div class=\"line\">\twatcher = dims_watcher_find(timer, type);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(watcher) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tev_timer_stop(timer-&gt;loop, &amp;watcher-&gt;timer_watcher);</div><div class=\"line\">\t\tdims_watcher_del(timer, type);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpthread_mutex_unlock(&amp;timer-&gt;lock);</div><div class=\"line\">\t<span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码中type字段主要是用来区分定时器类型的，例如一个程序里面需要使用多个定时器，那么用户这里可以type来唯一区分，相同的type认为是同一个定时器。用户在callback调用的时候，也可以根据type来进行不同的处理。<br>定时器可以重新设置，启动，停止。</p>\n<blockquote>\n<p>dims_timer_init()</p>\n</blockquote>\n<p>函数为初始化一个定时器</p>\n<p>##测试代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"dims_timer.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dims_timer_t</span> my_timer;</div><div class=\"line\"><span class=\"keyword\">int</span> cb1, cb2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_init_cb</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_timer_t</span> *tmr = (<span class=\"keyword\">dims_timer_t</span>*)arg;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"timer init %s\\n\"</span>, (<span class=\"keyword\">char</span>*)tmr-&gt;pvData);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_cb</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = arg;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s cb1 = %d\\n\"</span>, (<span class=\"keyword\">char</span>*)w-&gt;pvData, cb1);</div><div class=\"line\">\tcb1++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_cb_1</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = arg;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s cb2 =%d, type =%d\\n\"</span>, (<span class=\"keyword\">char</span>*)w-&gt;pvData, cb2, w-&gt;type);</div><div class=\"line\">\tcb2++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(cb2 &gt; <span class=\"number\">20</span>) dims_timer_stop(&amp;my_timer, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>**argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tdims_timer_create(&amp;my_timer, my_init_cb, <span class=\"string\">\"OK!!!\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tdims_timer_init(&amp;my_timer, my_cb, <span class=\"number\">0</span>, <span class=\"string\">\"call-1 \"</span>, <span class=\"number\">1</span>, <span class=\"number\">0.1</span>); <span class=\"comment\">//1s秒定时超时，后面每隔0.1s定时超时。\t\t</span></div><div class=\"line\">\tdims_timer_init(&amp;my_timer, my_cb_1, <span class=\"number\">1</span>, <span class=\"string\">\"call-2 \"</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.5</span>);\t\t</div><div class=\"line\"></div><div class=\"line\">\tdims_timer_start(&amp;my_timer, <span class=\"number\">0</span>);</div><div class=\"line\">\tdims_timer_start(&amp;my_timer, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\tsleep(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">\tdims_timer_stop(&amp;my_timer, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tsleep(<span class=\"number\">8</span>);</div><div class=\"line\">\tdims_timer_stop(&amp;my_timer, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\tsleep(<span class=\"number\">20</span>);\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##参考文档</p>\n<p>libev文档介绍：<a href=\"http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_timer_code_relative_and_opti\" target=\"_blank\" rel=\"external\">http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_timer_code_relative_and_opti</a></p>\n<p>libev官方网站：<a href=\"http://software.schmorp.de/pkg/libev.html\" target=\"_blank\" rel=\"external\">http://software.schmorp.de/pkg/libev.html</a></p>\n","excerpt":"","more":"<p>libev是轻量级、高性能事件循环/事件模型的网络库，和他很相似的开源有libevent，libev开源代码很晦涩，较难读懂，里面可谓是把宏用到极致，代码很简练。libev提供非常全的功能，包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">ev_io</div><div class=\"line\">ev_timer</div><div class=\"line\">ev_periodic</div><div class=\"line\">ev_signal</div><div class=\"line\">ev_child</div><div class=\"line\">ev_stat</div><div class=\"line\">ev_idle</div><div class=\"line\">ev_prepare and ev_check</div><div class=\"line\">ev_embed</div><div class=\"line\">ev_fork</div><div class=\"line\">ev_cleanup</div><div class=\"line\">ev_async</div></pre></td></tr></table></figure>\n<p>本文主要写一下关于timer如何使用，以及对他进行一个简单封装，这是开发软件常用的方法，原型开发时，能采用开源尽量利用开源资源，但正式开发是否会使用开源或者自己实现一个库是要进行评估的。所以开源相关接口都可以考虑封装，到时候使用其它库时，替换工作量较小。</p>\n<p>下面是实现代码：主要调用libev中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ev_loop_new</div><div class=\"line\">ev_loop</div><div class=\"line\">ev_timer_init</div><div class=\"line\">ev_timer_stop</div><div class=\"line\">ev_timer_start</div></pre></td></tr></table></figure></p>\n<p>这些接口，来完成定时器功能的封装。</p>\n<h2 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _dims_timer_h_</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _dims_timer_h_</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"dims_base.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ev.h\"</span></span></div><div class=\"line\">\t\t\t\t\t\t\t</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*dims_timer_cb)</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dims_watcher_tag</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">struct</span>\tdims_watcher_tag \t*next;</div><div class=\"line\">\tdims_uint32 \ttype; </div><div class=\"line\">\tdims_timer_cb   timer_cb;</div><div class=\"line\">\t<span class=\"keyword\">void</span>\t\t\t*pvData;</div><div class=\"line\">\tev_timer\t\ttimer_watcher; </div><div class=\"line\">&#125;<span class=\"keyword\">dims_watcher_t</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dims_timer_tag</div><div class=\"line\">&#123;</div><div class=\"line\">\tdims_uint32 \t\tbInited;</div><div class=\"line\">\tdims_timer_cb\t\tinit_cb;</div><div class=\"line\">\t<span class=\"keyword\">void</span>\t\t\t\t*pvData;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span>\t\t*watcher_list;</div><div class=\"line\">\t<span class=\"keyword\">pthread_t</span>\t\t\tthread_id;</div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span>\t\tlock;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> ev_loop \t\t*loop;</div><div class=\"line\">&#125;<span class=\"keyword\">dims_timer_t</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> dims_uint32 <span class=\"title\">dims_timer_create</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_timer_cb init_cb, <span class=\"keyword\">void</span> *pvInitData)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_timer_init</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, </div><div class=\"line\">\t\tdims_timer_cb\t  timer_cb,</div><div class=\"line\">\t\tdims_uint32       type,</div><div class=\"line\">\t\t<span class=\"keyword\">void</span>              *pvData,</div><div class=\"line\">\t\t<span class=\"keyword\">double</span>            after,</div><div class=\"line\">\t\t<span class=\"keyword\">double</span>            repeat)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_timer_start</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_timer_stop</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* _dims_timer_h_ */</span></span></div></pre></td></tr></table></figure>\n<p>##源文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 对libev timer操作进行封装</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ev.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"dims_timer.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">timer_watcher_cb</span><span class=\"params\">(EV_P_ ev_timer *w, <span class=\"keyword\">int</span> revents)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *watcher = (<span class=\"keyword\">dims_watcher_t</span>*)w-&gt;data;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!watcher) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(watcher-&gt;timer_cb)</div><div class=\"line\">\t\twatcher-&gt;timer_cb(watcher);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> * <span class=\"title\">timer_loop_entry</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_timer_t</span> *timer = (<span class=\"keyword\">dims_timer_t</span>*)arg;</div><div class=\"line\">\t<span class=\"keyword\">static</span> ev_timer w;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(timer-&gt;bInited) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\ttimer-&gt;loop = ev_loop_new(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\ttimer-&gt;bInited = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(timer-&gt;init_cb) timer-&gt;init_cb(arg);</div><div class=\"line\"></div><div class=\"line\">\tev_timer_init(&amp;w, timer_watcher_cb,<span class=\"number\">1</span> , <span class=\"number\">0</span>);</div><div class=\"line\">\tev_timer_start(timer-&gt;loop, &amp;w);</div><div class=\"line\"></div><div class=\"line\">\tev_loop(timer-&gt;loop, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">dims_uint32 <span class=\"title\">dims_timer_create</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_timer_cb init_cb, <span class=\"keyword\">void</span> *pvData)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> DIMS_ERROR;</div><div class=\"line\"></div><div class=\"line\">\ttimer-&gt;bInited = <span class=\"number\">0</span>;</div><div class=\"line\">\ttimer-&gt;init_cb = init_cb;</div><div class=\"line\">\ttimer-&gt;pvData = pvData;</div><div class=\"line\">\ttimer-&gt;watcher_list = DIMS_NULL;</div><div class=\"line\">\tpthread_mutex_init(&amp;timer-&gt;lock, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"number\">0</span> != pthread_create(&amp;(timer-&gt;thread_id), <span class=\"literal\">NULL</span>, timer_loop_entry, (<span class=\"keyword\">void</span>*)timer))</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DIMS_ERROR;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(!timer-&gt;bInited) sleep(<span class=\"number\">0</span>);\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> DIMS_OK;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_watcher_del</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = timer-&gt;watcher_list;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *prev_w = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(w-&gt;type == type) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\tprev_w = w;</div><div class=\"line\">\t\tw = w-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(prev_w) prev_w-&gt;next = w-&gt;next;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> timer-&gt;watcher_list = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">free</span>(w);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> dims_watcher_t * <span class=\"title\">dims_watcher_find</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = timer-&gt;watcher_list;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(w-&gt;type == type) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t\tw = w-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> w;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dims_watcher_ins</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, <span class=\"keyword\">dims_watcher_t</span> *w)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tw-&gt;next = timer-&gt;watcher_list;</div><div class=\"line\">\ttimer-&gt;watcher_list = w;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dims_timer_init</span><span class=\"params\">(</div><div class=\"line\">\t<span class=\"keyword\">dims_timer_t</span> \t*timer,</div><div class=\"line\">\tdims_timer_cb \ttimer_cb, </div><div class=\"line\">\tdims_uint32\t\ttype,</div><div class=\"line\">\t<span class=\"keyword\">void</span>\t\t\t*pvData,</div><div class=\"line\">\t<span class=\"keyword\">double</span> \t\t\tafter,</div><div class=\"line\">\t<span class=\"keyword\">double</span> \t\t\trepeat</div><div class=\"line\">\t)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *watcher;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> ;</div><div class=\"line\"></div><div class=\"line\">\tpthread_mutex_lock(&amp;timer-&gt;lock);</div><div class=\"line\">\twatcher = dims_watcher_find(timer, type);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(watcher)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tev_timer_stop(timer-&gt;loop, &amp;watcher-&gt;timer_watcher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\twatcher = (<span class=\"keyword\">dims_watcher_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">dims_watcher_t</span>));</div><div class=\"line\">\t\tdims_watcher_ins(timer, watcher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\twatcher-&gt;timer_cb = timer_cb;</div><div class=\"line\">\twatcher-&gt;type = type;</div><div class=\"line\">\twatcher-&gt;timer_watcher.data = (<span class=\"keyword\">void</span>*)watcher;</div><div class=\"line\">\twatcher-&gt;pvData = pvData;</div><div class=\"line\">\tev_timer_init(&amp;watcher-&gt;timer_watcher, timer_watcher_cb, after, repeat);</div><div class=\"line\">\t</div><div class=\"line\">\tpthread_mutex_unlock(&amp;timer-&gt;lock); </div><div class=\"line\">\t<span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dims_timer_start</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32 type)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span> ;</div><div class=\"line\"></div><div class=\"line\">\tpthread_mutex_lock(&amp;timer-&gt;lock);</div><div class=\"line\">\tw = dims_watcher_find(timer, type);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(w)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tev_timer_start(timer-&gt;loop, &amp;w-&gt;timer_watcher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpthread_mutex_unlock(&amp;timer-&gt;lock);</div><div class=\"line\">\t<span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dims_timer_stop</span><span class=\"params\">(<span class=\"keyword\">dims_timer_t</span> *timer, dims_uint32\ttype)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!timer) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *watcher;</div><div class=\"line\">\t</div><div class=\"line\">\tpthread_mutex_lock(&amp;timer-&gt;lock);</div><div class=\"line\">\twatcher = dims_watcher_find(timer, type);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(watcher) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tev_timer_stop(timer-&gt;loop, &amp;watcher-&gt;timer_watcher);</div><div class=\"line\">\t\tdims_watcher_del(timer, type);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpthread_mutex_unlock(&amp;timer-&gt;lock);</div><div class=\"line\">\t<span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码中type字段主要是用来区分定时器类型的，例如一个程序里面需要使用多个定时器，那么用户这里可以type来唯一区分，相同的type认为是同一个定时器。用户在callback调用的时候，也可以根据type来进行不同的处理。<br>定时器可以重新设置，启动，停止。</p>\n<blockquote>\n<p>dims_timer_init()</p>\n</blockquote>\n<p>函数为初始化一个定时器</p>\n<p>##测试代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"dims_timer.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dims_timer_t</span> my_timer;</div><div class=\"line\"><span class=\"keyword\">int</span> cb1, cb2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_init_cb</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_timer_t</span> *tmr = (<span class=\"keyword\">dims_timer_t</span>*)arg;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"timer init %s\\n\"</span>, (<span class=\"keyword\">char</span>*)tmr-&gt;pvData);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_cb</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = arg;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s cb1 = %d\\n\"</span>, (<span class=\"keyword\">char</span>*)w-&gt;pvData, cb1);</div><div class=\"line\">\tcb1++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">my_cb_1</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">dims_watcher_t</span> *w = arg;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s cb2 =%d, type =%d\\n\"</span>, (<span class=\"keyword\">char</span>*)w-&gt;pvData, cb2, w-&gt;type);</div><div class=\"line\">\tcb2++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(cb2 &gt; <span class=\"number\">20</span>) dims_timer_stop(&amp;my_timer, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>**argv)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tdims_timer_create(&amp;my_timer, my_init_cb, <span class=\"string\">\"OK!!!\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tdims_timer_init(&amp;my_timer, my_cb, <span class=\"number\">0</span>, <span class=\"string\">\"call-1 \"</span>, <span class=\"number\">1</span>, <span class=\"number\">0.1</span>); <span class=\"comment\">//1s秒定时超时，后面每隔0.1s定时超时。\t\t</span></div><div class=\"line\">\tdims_timer_init(&amp;my_timer, my_cb_1, <span class=\"number\">1</span>, <span class=\"string\">\"call-2 \"</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.5</span>);\t\t</div><div class=\"line\"></div><div class=\"line\">\tdims_timer_start(&amp;my_timer, <span class=\"number\">0</span>);</div><div class=\"line\">\tdims_timer_start(&amp;my_timer, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\tsleep(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">\tdims_timer_stop(&amp;my_timer, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tsleep(<span class=\"number\">8</span>);</div><div class=\"line\">\tdims_timer_stop(&amp;my_timer, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\tsleep(<span class=\"number\">20</span>);\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##参考文档</p>\n<p>libev文档介绍：<a href=\"http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_timer_code_relative_and_opti\">http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_timer_code_relative_and_opti</a></p>\n<p>libev官方网站：<a href=\"http://software.schmorp.de/pkg/libev.html\">http://software.schmorp.de/pkg/libev.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cix090hy50000eua6prr9078x","category_id":"cix090hyf0001eua67zali0id","_id":"cix090hyk0004eua6oqqfikip"}],"PostTag":[{"post_id":"cix090hy50000eua6prr9078x","tag_id":"cix090hyj0002eua6a0dkqmk8","_id":"cix090hym0007eua6b44w019r"},{"post_id":"cix090hy50000eua6prr9078x","tag_id":"cix090hyk0003eua6h2wdsrjo","_id":"cix090hym0008eua6ezu68n60"},{"post_id":"cix090hy50000eua6prr9078x","tag_id":"cix090hyl0005eua6xzye1603","_id":"cix090hym0009eua6gxysngtk"},{"post_id":"cix090hy50000eua6prr9078x","tag_id":"cix090hyl0006eua64ujqk78k","_id":"cix090hyn000aeua65cwdl9t5"}],"Tag":[{"name":"c","_id":"cix090hyj0002eua6a0dkqmk8"},{"name":"linux","_id":"cix090hyk0003eua6h2wdsrjo"},{"name":"libev","_id":"cix090hyl0005eua6xzye1603"},{"name":"timer","_id":"cix090hyl0006eua64ujqk78k"}]}}